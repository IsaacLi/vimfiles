# module and export all
snippet mod
	%%%-------------------------------------------------------------------
	%%% File    : `Filename('', 'my')`.erl
	%%% Author  : `g:snips_author`
	%%% Description : ${1:`Filename('', 'my')`}
	%%%
	%%% Created : `strftime("%Y-%m-%d")` by `g:snips_author`
	%%%-------------------------------------------------------------------
	-module(${2:`Filename('', 'my')`}).
	-author('`g:snips_author`').
	${3}
# define directive
snippet def
	-define(${1:macro}, ${2:body}).${3}
# export directive
snippet exp
	-export([${1:function}/${2:arity}]).
# include directive
snippet inc
	-include("${1:file}").${2}
# behavior directive
snippet beh
	-behaviour(${1:behaviour}).${2}
# if expression
snippet if
	if
	    ${1:guard} ->
	        ${2:body}
	end
# case expression
snippet case
	case ${1:expression} of
	    ${2:pattern} ->
	        ${3:body};
	end
# record directive
snippet rec
	-record(${1:record}, {
	    ${2:field}=${3:value}}).${4}
# io:format
snippet iof
	io:format("${1:string}~p~n", [${2:args}]),
# genserver
snippet genserver
	%%%-------------------------------------------------------------------
	%%% File    : `Filename('', 'my')`.erl
	%%% Author  : `g:snips_author`
	%%% Description : ${1:`Filename('', 'my')`}
	%%%
	%%% Created : `strftime("%Y-%m-%d")` by `g:snips_author`
	%%%-------------------------------------------------------------------
	-module(${2:`Filename('', 'my')`}).
	-author('`g:snips_author`').
	
	-behaviour(gen_server).

	%% API
	-export([start_link/0,${3}]).

	%% gen_server callbacks
	-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
		 terminate/2, code_change/3]).

	%%====================================================================
	%% API
	%%====================================================================

	start_link() ->
		gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

	%%====================================================================
	%% gen_server callbacks
	%%====================================================================
	
	init([]) ->
		ok.

	%%--------------------------------------------------------------------
	%% @spec handle_call(Request, From, State) -> {reply, Reply, State} |
	%%										{reply, Reply, State, Timeout} |
	%%										{noreply, State} |
	%%										{noreply, State, Timeout} |
	%%										{stop, Reason, Reply, State} |
	%%										{stop, Reason, State}
	%%
	%% @doc Handling call messages
	%%--------------------------------------------------------------------

	handle_call(Request, _From, State) ->
		% @todo Add error logging here
		io:format("Unknown call: ~p~n", [Request]),
		Reply = ok,
		{reply, Reply, State}.

	%%--------------------------------------------------------------------
	%% @spec handle_cast(Msg, State) -> {noreply, State} |
	%%										{noreply, State, Timeout} |
	%%										{stop, Reason, State}
	%%
	%% @doc Handling cast messages
	%%
	%% @end
	%%--------------------------------------------------------------------
	handle_cast(_Msg, State) ->
		{noreply, State}.

	%%--------------------------------------------------------------------
	%% @spec handle_info(Info, State) -> {noreply, State} |
	%%										 {noreply, State, Timeout} |
	%%										 {stop, Reason, State}
	%%
	%% @doc Handling all non call/cast messages
	%%--------------------------------------------------------------------
	handle_info(_Info, State) ->
		{noreply, State}.

	%%--------------------------------------------------------------------
	%% @spec terminate(Reason, State) -> void()
	%%
	%% @doc This function is called by a gen_server when it is about to
	%% terminate. It should be the opposite of Module:init/1 and do any necessary
	%% cleaning up. When it returns, the gen_server terminates with Reason.
	%% The return value is ignored.
	%%
	%% @end
	%%--------------------------------------------------------------------
	terminate(_Reason, _State) ->
		ok.

	%%--------------------------------------------------------------------
	%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}
	%%
	%% @doc Convert process state when code is changed
	%%--------------------------------------------------------------------
	code_change(_OldVsn, State, _Extra) ->
		{ok, State}.

	%%====================================================================
	%% Internal Functions
	%%====================================================================
# genfsm
snippet genfsm
	%%%-------------------------------------------------------------------
	%%% File    : `Filename('', 'my')`.erl
	%%% Author  : `g:snips_author`
	%%% Description : ${1:`Filename('', 'my')`}
	%%%
	%%% Created : `strftime("%Y-%m-%d")` by `g:snips_author`
	%%%-------------------------------------------------------------------
	-module(${2:`Filename('', 'my')`}).
	-author('`g:snips_author`').

	-behaviour(gen_fsm).

	%% API
	-export([start_link/0]).

	%% gen_fsm callbacks
	-export([init/1, state_name/2, state_name/3, handle_event/3,
			 handle_sync_event/4, handle_info/3, terminate/3, code_change/4]).

	-define(SERVER, ?MODULE).

	%%====================================================================
	%% API
	%%====================================================================
	%%--------------------------------------------------------------------
	%% Function: start_link() -> ok,Pid} | ignore | {error,Error}
	%% Description:Creates a gen_fsm process which calls Module:init/1 to
	%% initialize. To ensure a synchronized start-up procedure, this function
	%% does not return until Module:init/1 has returned.
	%%--------------------------------------------------------------------
	start_link() ->
		gen_fsm:start_link({local, ?SERVER}, ?MODULE, [], []).

	%%====================================================================
	%% gen_fsm callbacks
	%%====================================================================
	%%--------------------------------------------------------------------
	%% Function: init(Args) -> {ok, StateName, State} |
	%%                         {ok, StateName, State, Timeout} |
	%%                         ignore                              |
	%%                         {stop, StopReason}
	%% Description:Whenever a gen_fsm is started using gen_fsm:start/[3,4] or
	%% gen_fsm:start_link/3,4, this function is called by the new process to
	%% initialize.
	%%--------------------------------------------------------------------
	init([]) ->
	    {ok, state_name, nobody}.

	%%--------------------------------------------------------------------
	%% Function:
	%% state_name(Event, State) -> {next_state, NextStateName, NextState}|
	%%                             {next_state, NextStateName,
	%%                                NextState, Timeout} |
	%%                             {stop, Reason, NewState}
	%% Description:There should be one instance of this function for each possible
	%% state name. Whenever a gen_fsm receives an event sent using
	%% gen_fsm:send_event/2, the instance of this function with the same name as
	%% the current state name StateName is called to handle the event. It is also
	%% called if a timeout occurs.
	%%--------------------------------------------------------------------
	state_name(_Event, State) ->
	    {next_state, state_name, State}.

	%%--------------------------------------------------------------------
	%% Function:
	%% state_name(Event, From, State) -> {next_state, NextStateName, NextState} |
	%%                                   {next_state, NextStateName,
	%%                                     NextState, Timeout} |
	%%                                   {reply, Reply, NextStateName, NextState}|
	%%                                   {reply, Reply, NextStateName,
	%%                                    NextState, Timeout} |
	%%                                   {stop, Reason, NewState}|
	%%                                   {stop, Reason, Reply, NewState}
	%% Description: There should be one instance of this function for each
	%% possible state name. Whenever a gen_fsm receives an event sent using
	%% gen_fsm:sync_send_event/2,3, the instance of this function with the same
	%% name as the current state name StateName is called to handle the event.
	%%--------------------------------------------------------------------
	state_name(_Event, _From, State) ->
	    Reply = ok,
	    {reply, Reply, state_name, State}.

	%%--------------------------------------------------------------------
	%% Function:
	%% handle_event(Event, StateName, State) -> {next_state, NextStateName,
	%%                                                NextState} |
	%%                                          {next_state, NextStateName,
	%%                                                NextState, Timeout} |
	%%                                          {stop, Reason, NewState}
	%% Description: Whenever a gen_fsm receives an event sent using
	%% gen_fsm:send_all_state_event/2, this function is called to handle
	%% the event.
	%%--------------------------------------------------------------------
	handle_event(_Event, StateName, State) ->
	    {next_state, StateName, State}.

	%%--------------------------------------------------------------------
	%% Function:
	%% handle_sync_event(Event, From, StateName,
	%%                   State) -> {next_state, NextStateName, NextState} |
	%%                             {next_state, NextStateName, NextState,
	%%                              Timeout} |
	%%                             {reply, Reply, NextStateName, NextState}|
	%%                             {reply, Reply, NextStateName, NextState,
	%%                              Timeout} |
	%%                             {stop, Reason, NewState} |
	%%                             {stop, Reason, Reply, NewState}
	%% Description: Whenever a gen_fsm receives an event sent using
	%% gen_fsm:sync_send_all_state_event/2,3, this function is called to handle
	%% the event.
	%%--------------------------------------------------------------------
	handle_sync_event(Event, From, StateName, State) ->
	    Reply = ok,
	    {reply, Reply, StateName, State}.

	%%--------------------------------------------------------------------
	%% Function:
	%% handle_info(Info,StateName,State)-> {next_state, NextStateName, NextState}|
	%%                                     {next_state, NextStateName, NextState,
	%%                                       Timeout} |
	%%                                     {stop, Reason, NewState}
	%% Description: This function is called by a gen_fsm when it receives any
	%% other message than a synchronous or asynchronous event
	%% (or a system message).
	%%--------------------------------------------------------------------
	handle_info(_Info, StateName, State) ->
	    {next_state, StateName, State}.

	%%--------------------------------------------------------------------
	%% Function: terminate(Reason, StateName, State) -> void()
	%% Description:This function is called by a gen_fsm when it is about
	%% to terminate. It should be the opposite of Module:init/1 and do any
	%% necessary cleaning up. When it returns, the gen_fsm terminates with
	%% Reason. The return value is ignored.
	%%--------------------------------------------------------------------
	terminate(_Reason, _StateName, _State) ->
	    ok.

	%%--------------------------------------------------------------------
	%% Function:
	%% code_change(OldVsn, StateName, State, Extra) -> {ok, StateName, NewState}
	%% Description: Convert process state when code is changed
	%%--------------------------------------------------------------------
	code_change(_OldVsn, StateName, State, _Extra) ->
	    {ok, StateName, State}.

	%%--------------------------------------------------------------------
	%%% Internal functions
	%%--------------------------------------------------------------------
